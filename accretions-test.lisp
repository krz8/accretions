;;;; tests for the accretions library
(defpackage #:accretions-test
  (:use #:cl #:5am #:accretions)
  (:export #:all #:bag #:tst))

(in-package #:accretions-test)
(def-suite all :description "all accretions tests")

(def-suite bags :description "bags" :in all)
(in-suite bags)

(test make-bag
  (let ((b (make-bag)))
    (is (not (null b)))
    (is (typep b 'acr:bag))
    (is (eql (acr::test b) #'equal))))

(test (make-bag-test :depends-on make-bag)
  (let ((b (make-bag :test #'eq)))
    (is (not (null b)))
    (is (typep b 'acr:bag))
    (is (eql (acr::test b) #'eq))))

(test (emptyp :depends-on make-bag)
  (let ((b (make-bag)))
    (is (emptyp b))
    (push 123 (acr::items b))		; haven't tested add yet
    (is (not (emptyp b)))))

(defmacro with-bag ((name) &body body)
  `(let ((,name (make-bag)))
     (is-true (add ,name 'a))
     (is-true (add ,name 3))
     (is-true (add ,name t))
     (is-true (add ,name nil))
     (is-true (add ,name "foobar"))
     ,@body))

(test (add :depends-on make-bag)
  (with-bag (b)
    (let ((l (acr::items b)))
      (is (equal (car l) "foobar"))
      (is (null (cadr l)))
      (is (eq (caddr l) t))
      (is (= (cadddr l) 3))
      (is (eq (car (cddddr l)) 'a))
      (is (null (cdr (cddddr l)))))))

(test (mapfun :depends-on add)
  (let ((b (make-bag))
	(n 0))
    (mapfun (lambda (x)
	      (declare (ignore x))
	      (incf n))
	    b)
    (is (zerop n)))
  (with-bag (b)
    (let (r)
      (mapfun (lambda (x) (push x r)) b)
      (is (= (length r) 5))
      (is (equalp r '(a 3 t nil "foobar"))))))

(test (containsp :depends-on add)
  (with-bag (b)
    (is-true (containsp "foobar" b))
    (is-true (containsp nil b))
    (is-true (containsp t b))
    (is-true (containsp 3 b))
    (is-true (containsp 'a b))
    (is-false (containsp "FOOBAR" b))
    (is-false (containsp 2 b))
    (is-false (containsp 'b b)))
  (let ((b (make-bag :test #'equalp)))
    (is-true (add b "foobar"))
    (is-true (containsp b "foobar"))
    (is-true (containsp b "FOOBAR")))
  (let ((b (make-bag :test #'eq)))
    (is-true (add b "foobar"))
    (is-false (emptyp b))
    (is-false (containsp b "foobar"))
    (is-false (containsp b "FOOBAR"))))

(def-suite tst :description "ternary search trees" :in all)
(in-suite tst)
